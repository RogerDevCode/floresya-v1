openapi: 3.1.0
info:
  title: FloresYa API
  version: 1.0.0
  description: E-commerce API for flower delivery - Built with KISS principles
  contact:
    name: FloresYa Team
    email: support@floresya.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://floresya.vercel.app
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication
  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: Response data
        message:
          type: string
          example: Operation completed successfully
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Error message
        message:
          type: string
          example: Operation failed
        details:
          type: array
          items:
            type: string
          description: Validation errors (if applicable)
    user:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        full_name:
          type: string
          example: John Doe
        phone:
          type: string
          example: '+1234567890'
        role:
          type: string
          enum:
            - user
            - admin
          example: user
        email_verified:
          type: boolean
          example: false
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Red Roses Bouquet
        summary:
          type: string
          example: Dozen red roses
          nullable: true
        description:
          type: string
          example: Beautiful red roses
          nullable: true
        price_usd:
          type: number
          format: decimal
          example: 29.99
        price_ves:
          type: number
          format: decimal
          example: 1200
          nullable: true
        stock:
          type: integer
          example: 50
        sku:
          type: string
          example: ROSE-RED-001
          nullable: true
        featured:
          type: boolean
          example: true
        carousel_order:
          type: integer
          example: 1
          nullable: true
        active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    occasion:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Birthday
        description:
          type: string
          example: Flowers for birthdays
        slug:
          type: string
          example: birthday
        display_order:
          type: integer
          example: 1
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    productimage:
      type: object
      properties:
        id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 67
        image_index:
          type: integer
          example: 1
        size:
          type: string
          enum:
            - thumb
            - small
            - medium
            - large
          example: small
        url:
          type: string
          format: uri
          example: https://abc123.supabase.co/storage/v1/object/public/product-images/67_1_small.webp
        file_hash:
          type: string
          example: abc123def456...
        mime_type:
          type: string
          example: image/webp
        is_primary:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    order:
      type: object
      properties:
        id:
          type: integer
          example: 1001
        user_id:
          type: integer
          example: 5
        customer_email:
          type: string
          format: email
          example: maria@example.com
        customer_name:
          type: string
          example: María González
        customer_phone:
          type: string
          example: +58 412-1234567
        delivery_address:
          type: string
          example: Av. Principal, Caracas
        delivery_date:
          type: string
          format: date
          example: '2025-10-05'
        delivery_time_slot:
          type: string
          example: 10:00-12:00
        delivery_notes:
          type: string
          example: Llamar al llegar
        status:
          type: string
          enum:
            - pending
            - verified
            - preparing
            - shipped
            - delivered
            - cancelled
          example: pending
        total_amount_usd:
          type: number
          format: decimal
          example: 89.99
        total_amount_ves:
          type: number
          format: decimal
          example: 3599.6
        currency_rate:
          type: number
          format: decimal
          example: 40
        notes:
          type: string
          example: Ocasión especial
        admin_notes:
          type: string
          example: Cliente frecuente
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1001
        product_id:
          type: integer
          example: 67
        product_name:
          type: string
          example: Ramo Tropical Vibrante
        product_summary:
          type: string
          example: Flores tropicales vibrantes
        unit_price_usd:
          type: number
          format: decimal
          example: 45.99
        unit_price_ves:
          type: number
          format: decimal
          example: 1839.6
        quantity:
          type: integer
          example: 2
        subtotal_usd:
          type: number
          format: decimal
          example: 91.98
        subtotal_ves:
          type: number
          format: decimal
          example: 3679.2
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    OrderStatusHistory:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1001
        old_status:
          type: string
          enum:
            - pending
            - verified
            - preparing
            - shipped
            - delivered
            - cancelled
          example: pending
        new_status:
          type: string
          enum:
            - pending
            - verified
            - preparing
            - shipped
            - delivered
            - cancelled
          example: verified
        notes:
          type: string
          example: Pago verificado
        changed_by:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
    payment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        amount_usd:
          type: number
          format: decimal
          example: 59.99
        amount_ves:
          type: number
          format: decimal
          example: 2400
        payment_method_name:
          type: string
          example: Bank Transfer
        transaction_id:
          type: string
          example: TXN123456
        reference_number:
          type: string
          example: REF789
        status:
          type: string
          enum:
            - pending
            - completed
            - failed
            - refunded
            - partially_refunded
          example: pending
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    settings:
      type: object
      properties:
        key:
          type: string
          example: site_name
        value:
          type: string
          example: FloresYa
        description:
          type: string
          example: Site name for branding
        is_public:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PaginationParams:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        offset:
          type: integer
          minimum: 0
          default: 0
        page:
          type: integer
          minimum: 1
    OrderStatusUpdate:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - pending
            - verified
            - preparing
            - shipped
            - delivered
            - cancelled
          example: verified
        notes:
          type: string
          example: Payment confirmed
    PaymentConfirm:
      type: object
      required:
        - payment_method
        - reference_number
      properties:
        payment_method:
          type: string
          enum:
            - cash
            - mobile_payment
            - bank_transfer
            - zelle
            - crypto
          example: bank_transfer
        reference_number:
          type: string
          minLength: 3
          maxLength: 100
          example: TF-20231101-001
        payment_details:
          type: object
          example:
            bank: Banco Mercantil
            payer: José Pérez
        receipt_image_url:
          type: string
          format: uri
          example: https://example.com/receipt.jpg
    OrderCreate:
      type: object
      required:
        - order
        - items
      properties:
        order:
          type: object
          required:
            - customer_email
            - customer_name
            - delivery_address
            - total_amount_usd
          properties:
            customer_email:
              type: string
              format: email
            customer_name:
              type: string
              minLength: 2
              maxLength: 255
            customer_phone:
              type: string
              pattern: ^\+?[\d\s-()]+$
            delivery_address:
              type: string
              minLength: 10
              maxLength: 500
            delivery_date:
              type: string
              format: date
            delivery_time_slot:
              type: string
              pattern: ^\d{2}:\d{2}-\d{2}:\d{2}$
            delivery_notes:
              type: string
              maxLength: 1000
            total_amount_usd:
              type: number
              minimum: 0
            total_amount_ves:
              type: number
              minimum: 0
            currency_rate:
              type: number
              minimum: 0
            status:
              type: string
              enum:
                - pending
                - verified
                - preparing
                - shipped
                - delivered
                - cancelled
            notes:
              type: string
              maxLength: 1000
        items:
          type: array
          items:
            type: object
            required:
              - product_id
              - product_name
              - unit_price_usd
              - quantity
            properties:
              product_id:
                type: integer
                minimum: 1
              product_name:
                type: string
                minLength: 1
              product_summary:
                type: string
              unit_price_usd:
                type: number
                minimum: 0
              unit_price_ves:
                type: number
                minimum: 0
              quantity:
                type: integer
                minimum: 1
              subtotal_usd:
                type: number
                minimum: 0
              subtotal_ves:
                type: number
                minimum: 0
  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: Resource ID
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      description: Number of items to return
    OffsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Number of items to skip
tags:
  - name: Products
    description: Product management endpoints
  - name: Orders
    description: Order management endpoints
  - name: Users
    description: User management endpoints
  - name: Payments
    description: Payment management endpoints
  - name: Occasions
    description: Occasion management endpoints
  - name: Settings
    description: Settings management endpoints
paths:
  /api/products:
    get:
      tags:
        - Products
      summary: Get all products with filters
      description: Returns paginated list of active products with optional filters (uses indexed columns for performance)
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: featured
          in: query
          schema:
            type: boolean
          description: Filter by featured products (uses idx_products_featured)
        - name: sku
          in: query
          schema:
            type: string
          description: Filter by SKU (uses idx_products_sku)
        - name: search
          in: query
          schema:
            type: string
          description: Search in name and description (accent-insensitive, uses indexed normalized columns)
        - name: sortBy
          in: query
          schema:
            type: string
            enum:
              - name_asc
              - name_desc
              - price_asc
              - price_desc
              - created_at
              - carousel_order
          description: Sort field with direction
        - name: imageSize
          in: query
          schema:
            type: string
            enum:
              - thumb
              - small
              - medium
              - large
          description: Include product with specific image size
        - name: occasion
          in: query
          schema:
            type: string
          description: Filter by occasion slug (joins with product_occasions table)
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Products
      summary: Create new product
      description: Admin only - Creates a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price_usd
              properties:
                product:
                  type: object
                  required:
                    - name
                    - price_usd
                  properties:
                    name:
                      type: string
                      minLength: 2
                      maxLength: 255
                    summary:
                      type: string
                    description:
                      type: string
                    price_usd:
                      type: number
                      minimum: 0
                    price_ves:
                      type: number
                      minimum: 0
                    stock:
                      type: integer
                      minimum: 0
                    sku:
                      type: string
                      maxLength: 50
                    featured:
                      type: boolean
                    carousel_order:
                      type: integer
                      minimum: 0
                      maximum: 7
                name:
                  type: string
                  minLength: 2
                  maxLength: 255
                summary:
                  type: string
                description:
                  type: string
                price_usd:
                  type: number
                  minimum: 0
                price_ves:
                  type: number
                  minimum: 0
                stock:
                  type: integer
                  minimum: 0
                sku:
                  type: string
                  maxLength: 50
                featured:
                  type: boolean
                carousel_order:
                  type: integer
                  minimum: 0
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - $ref: '#/components/parameters/IdParam'
        - name: imageSize
          in: query
          schema:
            type: string
            enum:
              - thumb
              - small
              - medium
              - large
          description: Include product with specific image size
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Products
      summary: Update product
      description: Admin only - Updates product fields
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 255
                summary:
                  type: string
                description:
                  type: string
                price_usd:
                  type: number
                  minimum: 0
                price_ves:
                  type: number
                  minimum: 0
                stock:
                  type: integer
                  minimum: 0
                sku:
                  type: string
                  maxLength: 50
                active:
                  type: boolean
                featured:
                  type: boolean
                carousel_order:
                  type: integer
                  minimum: 0
                  maximum: 7
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Products
      summary: Delete product (soft delete)
      description: Admin only - Soft deletes a product (sets active to false)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/products/carousel:
    get:
      tags:
        - Products
      summary: Get carousel products
      description: Returns featured products for carousel display (ordered by carousel_order)
      responses:
        '200':
          description: Carousel products retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/product'
  /api/products/with-occasions:
    get:
      tags:
        - Products
      summary: Get products with occasions
      description: Returns products with their associated occasions
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: featured
          in: query
          schema:
            type: boolean
          description: Filter by featured products
      responses:
        '200':
          description: Products with occasions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/product'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Products
      summary: Create product with occasions
      description: Admin only - Creates a new product with associated occasions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product
                - occasionIds
              properties:
                product:
                  type: object
                  required:
                    - name
                    - price_usd
                  properties:
                    name:
                      type: string
                      minLength: 2
                      maxLength: 255
                    summary:
                      type: string
                    description:
                      type: string
                    price_usd:
                      type: number
                      minimum: 0
                    price_ves:
                      type: number
                      minimum: 0
                    stock:
                      type: integer
                      minimum: 0
                    sku:
                      type: string
                      maxLength: 50
                    featured:
                      type: boolean
                    carousel_order:
                      type: integer
                      minimum: 0
                      maximum: 7
                occasionIds:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: Product with occasions created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/products/occasion/{occasionId}:
    get:
      tags:
        - Products
      summary: Get products by occasion
      parameters:
        - name: occasionId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Occasion ID
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: Products for occasion retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/product'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/products/sku/{sku}:
    get:
      tags:
        - Products
      summary: Get product by SKU
      parameters:
        - name: sku
          in: path
          required: true
          schema:
            type: string
          description: Product SKU
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/products/{id}/images/primary:
    get:
      tags:
        - Products
      summary: Get primary image for product
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Primary image retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/productimage'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/products/{id}/images:
    get:
      tags:
        - Products
      summary: Get all images for product
      parameters:
        - $ref: '#/components/parameters/IdParam'
        - name: size
          in: query
          schema:
            type: string
            enum:
              - thumb
              - small
              - medium
              - large
          description: Filter by image size
      responses:
        '200':
          description: Product images retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/productimage'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Products
      summary: Upload product images
      description: Admin only - Uploads new images for a product (creates all sizes)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
                is_primary:
                  type: boolean
                  description: Set as primary image
      responses:
        '201':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/productimage'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/products/{id}/carousel-order:
    patch:
      tags:
        - Products
      summary: Update product carousel order
      description: Admin only - Updates the carousel display order for a product
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order
              properties:
                order:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Carousel order updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/products/{id}/stock:
    patch:
      tags:
        - Products
      summary: Update product stock
      description: Admin only - Updates the stock quantity for a product
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Stock updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/products/{id}/images/{imageIndex}:
    delete:
      tags:
        - Products
      summary: Delete product images by index
      description: Admin only - Deletes all sizes of a specific image index
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
        - name: imageIndex
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Image index to delete
      responses:
        '200':
          description: Images deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/products/{id}/images/primary/{imageIndex}:
    patch:
      tags:
        - Products
      summary: Set primary image
      description: Admin only - Sets a specific image index as the primary image
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
        - name: imageIndex
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Image index to set as primary
      responses:
        '200':
          description: Primary image updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/productimage'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/products/{id}/reactivate:
    patch:
      tags:
        - Products
      summary: Reactivate product
      description: Admin only - Reactivates a soft-deleted product
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Product reactivated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/orders:
    get:
      tags:
        - Orders
      summary: Get all orders with filters
      description: Admin only - Returns paginated list of orders with optional filters (uses indexed columns for performance)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          schema:
            type: string
            enum:
              - pending
              - verified
              - preparing
              - shipped
              - delivered
              - cancelled
          description: Filter by order status (uses idx_orders_status)
        - name: user_id
          in: query
          schema:
            type: integer
          description: Filter by user ID (uses idx_orders_user_id)
        - name: date_from
          in: query
          schema:
            type: string
            format: date-time
          description: Filter orders from date (uses idx_orders_created_at)
        - name: date_to
          in: query
          schema:
            type: string
            format: date-time
          description: Filter orders to date
        - name: search
          in: query
          schema:
            type: string
          description: Search in customer_name and customer_email (accent-insensitive, uses indexed normalized columns)
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Orders
      summary: Create new order with customer and payment information
      description: Create a new order (public endpoint for checkout process)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customer_email
                - customer_name
                - customer_phone
                - delivery_address
                - total_amount_usd
                - items
              properties:
                order:
                  type: object
                  required:
                    - customer_email
                    - customer_name
                    - customer_phone
                    - delivery_address
                    - total_amount_usd
                  properties:
                    customer_email:
                      type: string
                      format: email
                    customer_name:
                      type: string
                      minLength: 2
                      maxLength: 255
                    customer_phone:
                      type: string
                      pattern: ^\\+?[\\d\\s-()]+$
                    delivery_address:
                      type: string
                      minLength: 10
                      maxLength: 500
                    delivery_date:
                      type: string
                      format: date
                    delivery_time_slot:
                      type: string
                      pattern: ^\\d{2}:\\d{2}-\\d{2}:\\d{2}$
                    delivery_notes:
                      type: string
                      maxLength: 1000
                    total_amount_usd:
                      type: number
                      minimum: 0
                    total_amount_ves:
                      type: number
                      minimum: 0
                    currency_rate:
                      type: number
                      minimum: 0
                    status:
                      type: string
                      enum:
                        - pending
                        - verified
                        - preparing
                        - shipped
                        - delivered
                        - cancelled
                    notes:
                      type: string
                      maxLength: 1000
                items:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - product_id
                      - product_name
                      - unit_price_usd
                      - quantity
                    properties:
                      product_id:
                        type: integer
                        minimum: 1
                      product_name:
                        type: string
                        minLength: 1
                      product_summary:
                        type: string
                      unit_price_usd:
                        type: number
                        minimum: 0
                      unit_price_ves:
                        type: number
                        minimum: 0
                      quantity:
                        type: integer
                        minimum: 1
                      subtotal_usd:
                        type: number
                        minimum: 0
                      subtotal_ves:
                        type: number
                        minimum: 0
                customer_email:
                  type: string
                  format: email
                customer_name:
                  type: string
                  minLength: 2
                customer_phone:
                  type: string
                delivery_address:
                  type: string
                  minLength: 10
                delivery_notes:
                  type: string
                notes:
                  type: string
                total_amount_usd:
                  type: number
                  minimum: 0
                total_amount_ves:
                  type: number
                  minimum: 0
                currency_rate:
                  type: number
                  minimum: 0
                status:
                  type: string
                  enum:
                    - pending
                    - verified
                    - preparing
                    - shipped
                    - delivered
                    - cancelled
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/order'
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '429':
          description: Too many requests
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Get order details by ID (owner or admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Orders
      summary: Update order
      description: Update order details (owner or admin, limited fields)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                delivery_notes:
                  type: string
                  maxLength: 1000
                notes:
                  type: string
                  maxLength: 1000
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/order'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/orders/user/{userId}:
    get:
      tags:
        - Orders
      summary: Get orders by user
      description: Get all orders for a specific user (owner or admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: User ID
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: User orders retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/orders/{id}/status-history:
    get:
      tags:
        - Orders
      summary: Get order status history
      description: Get the complete status change history for an order
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Order status history retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderStatusHistory'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/orders/{id}/status:
    patch:
      tags:
        - Orders
      summary: Update order status
      description: Admin only - Update order status with optional notes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/order'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/orders/{id}/cancel:
    patch:
      tags:
        - Orders
      summary: Cancel order
      description: Cancel an order (owner or admin) with optional cancellation notes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                notes:
                  type: string
                  maxLength: 1000
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/order'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Admin only - Returns paginated list of all users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: role
          in: query
          schema:
            type: string
            enum:
              - user
              - admin
          description: Filter by user role
        - name: email_verified
          in: query
          schema:
            type: boolean
          description: Filter by email verification status
        - name: search
          in: query
          schema:
            type: string
          description: Search in full_name and email (accent-insensitive, uses indexed normalized columns)
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user account (public registration)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - full_name
              properties:
                email:
                  type: string
                  format: email
                full_name:
                  type: string
                  minLength: 2
                  maxLength: 255
                phone:
                  type: string
                  pattern: ^\\+?[\\d\\s-()]+$
                role:
                  type: string
                  enum:
                    - user
                    - admin
                  default: user
                password_hash:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: User already exists
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get user details by ID (owner or admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Users
      summary: Update user
      description: Update user details (owner or admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  minLength: 2
                  maxLength: 255
                phone:
                  type: string
                  pattern: ^\\+?[\\d\\s-()]+$
                role:
                  type: string
                  enum:
                    - user
                    - admin
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Users
      summary: Delete user (soft delete)
      description: Admin only - Soft deletes a user (sets is_active to false)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/users/email/{email}:
    get:
      tags:
        - Users
      summary: Get user by email
      description: Admin only - Get user details by email address
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: User email address
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/users/{id}/reactivate:
    patch:
      tags:
        - Users
      summary: Reactivate user
      description: Admin only - Reactivates a soft-deleted user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: User reactivated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/users/{id}/verify-email:
    patch:
      tags:
        - Users
      summary: Verify user email
      description: Verify user email address (owner or admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/payments/methods:
    get:
      tags:
        - Payments
      summary: Get available payment methods for Venezuela
      description: Public - Returns available payment methods for Venezuela
      responses:
        '200':
          description: Payment methods retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: string
                $ref: '#/components/schemas/SuccessResponse'
  /api/payments/{id}/confirm:
    post:
      tags:
        - Payments
      summary: Confirm payment for order
      description: Confirm payment for an existing order (authenticated users)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentConfirm'
      responses:
        '200':
          description: Payment confirmed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/payment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/payments:
    get:
      tags:
        - Payments
      summary: Get all payments with filters
      description: Admin only - Returns paginated list of payments with optional filters (uses indexed columns)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          schema:
            type: string
            enum:
              - pending
              - completed
              - failed
              - refunded
              - partially_refunded
          description: Filter by payment status (uses idx_payments_status)
        - name: order_id
          in: query
          schema:
            type: integer
          description: Filter by order ID (uses idx_payments_order_id)
        - name: payment_method_id
          in: query
          schema:
            type: integer
          description: Filter by payment method (uses idx_payments_payment_method_id)
        - name: user_id
          in: query
          schema:
            type: integer
          description: Filter by user ID (uses idx_payments_user_id)
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/payment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/occasions:
    get:
      tags:
        - Occasions
      summary: Get all occasions
      description: Public - Returns all active occasions, sorted by display_order.
      parameters:
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Occasions retrieved successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/occasion'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Occasions
      summary: Create new occasion
      description: Admin only - Creates a new occasion.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                description:
                  type: string
                slug:
                  type: string
                  pattern: ^[a-z0-9-]+$
                display_order:
                  type: integer
                  minimum: 0
      responses:
        '201':
          description: Occasion created successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/occasion'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/occasions/{id}:
    get:
      tags:
        - Occasions
      summary: Get occasion by ID
      description: Get occasion details by its unique ID.
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Occasion retrieved successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/occasion'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Occasions
      summary: Update occasion
      description: Admin only - Updates an existing occasion.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                description:
                  type: string
                slug:
                  type: string
                  pattern: ^[a-z0-9-]+$
                display_order:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Occasion updated successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/occasion'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Occasions
      summary: Delete occasion (soft delete)
      description: Admin only - Soft deletes an occasion by setting its `is_active` flag to false.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Occasion deactivated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/occasions/slug/{slug}:
    get:
      tags:
        - Occasions
      summary: Get occasion by slug
      description: Get occasion details by its unique slug.
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          description: Occasion slug
      responses:
        '200':
          description: Occasion retrieved successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/occasion'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/occasions/{id}/display-order:
    patch:
      tags:
        - Occasions
      summary: Update occasion display order
      description: Admin only - Atomically updates the display order for an occasion.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order
              properties:
                order:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Display order updated successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/occasion'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/occasions/{id}/reactivate:
    patch:
      tags:
        - Occasions
      summary: Reactivate occasion
      description: Admin only - Reactivates a soft-deleted occasion by setting its `is_active` flag to true.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Occasion reactivated successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/occasion'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/settings/public:
    get:
      tags:
        - Settings
      summary: Get public settings
      description: Public - Returns public settings only
      responses:
        '200':
          description: Public settings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/settings'
  /api/settings/map:
    get:
      tags:
        - Settings
      summary: Get settings map
      description: Returns settings as a key-value map
      responses:
        '200':
          description: Settings map retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        additionalProperties:
                          type: string
  /api/settings/{key}/value:
    get:
      tags:
        - Settings
      summary: Get setting value by key
      description: Get a specific setting value by its key
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: Setting key
      responses:
        '200':
          description: Setting value retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/settings:
    get:
      tags:
        - Settings
      summary: Get all settings
      description: Admin only - Returns all settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Settings retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/settings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags:
        - Settings
      summary: Create new setting
      description: Admin only - Creates a new setting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - key
                - value
              properties:
                key:
                  type: string
                  pattern: ^[a-z0-9_]+$
                value:
                  type: string
                description:
                  type: string
                is_public:
                  type: boolean
      responses:
        '201':
          description: Setting created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/settings'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/settings/{key}:
    get:
      tags:
        - Settings
      summary: Get setting by key
      description: Admin only - Get setting details by key
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: Setting key
      responses:
        '200':
          description: Setting retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/settings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Settings
      summary: Update setting
      description: Admin only - Updates an existing setting
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: Setting key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                description:
                  type: string
                is_public:
                  type: boolean
      responses:
        '200':
          description: Setting updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/settings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Settings
      summary: Delete setting
      description: Admin only - Deletes a setting
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: Setting key
      responses:
        '200':
          description: Setting deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/admin/settings/image:
    post:
      tags:
        - Admin
      summary: Upload setting image
      description: Admin only - Upload and save image for a specific setting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/admin/settings/bcv-price:
    post:
      tags:
        - Admin
      summary: Save BCV USD rate
      description: Admin only - Save BCV USD exchange rate
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rate
              properties:
                rate:
                  type: number
                  minimum: 0
      responses:
        '200':
          description: BCV rate saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/admin/settings/business-rules:
    get:
      tags:
        - Admin
      summary: Get business rules status
      description: Admin only - Get business rules engine status and configuration
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Business rules status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/payment/{id}:
    get:
      tags:
        - payment
      summary: Confirm payment
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Confirm payment operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/payment'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/product/{id}:
    post:
      tags:
        - product
      summary: Create product
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Create product operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - product
      summary: Update product
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Update product operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/productimage/{id}:
    get:
      tags:
        - productimage
      summary: Set primary image
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Set primary image operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/productimage'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - productimage
      summary: Create product images
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Create product images operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/productimage'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - productimage
      summary: Delete images by index
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Delete images by index operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/productimage'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
