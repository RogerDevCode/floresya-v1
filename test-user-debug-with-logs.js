/**
 * Debug Script: Agregar logs detallados para validar diagn√≥stico
 * Este script agrega logs comprehensivos al proceso de carga de usuarios
 * para identificar exactamente d√≥nde ocurre el problema de datos falsos
 */

import dotenv from 'dotenv'
import { createClient } from '@supabase/supabase-js'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

// Load environment variables
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
dotenv.config({ path: join(__dirname, '.env.local') })

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing environment variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugWithDetailedLogs() {
  console.log('üîç DEBUG CON LOGS DETALLADOS: Datos falsos en columna is_active')
  console.log('='.repeat(80))

  try {
    // 1. Datos reales de la BD con logs detallados
    console.log('\nüìä PASO 1: EXTRACCI√ìN DE DATOS DE LA BD')
    console.log('-'.repeat(60))

    const { data: allUsersFromDB, error: dbError } = await supabase
      .from('users')
      .select('*')
      .order('id', { ascending: true })

    if (dbError) {
      console.error('‚ùå Error querying database:', dbError)
      return
    }

    console.log(`‚úÖ Usuarios encontrados en BD: ${allUsersFromDB.length}`)

    // Log detallado de cada usuario
    console.log('\nüìã LOG DETALLADO DE USUARIOS EN BD:')
    console.log('-'.repeat(60))

    const usersByStatus = {
      active: [],
      inactive: []
    }

    allUsersFromDB.forEach((user, index) => {
      const userInfo = {
        id: user.id,
        email: user.email,
        full_name: user.full_name,
        is_active: user.is_active,
        role: user.role,
        email_verified: user.email_verified
      }

      usersByStatus[user.is_active ? 'active' : 'inactive'].push(userInfo)

      console.log(
        `[${index + 1}] ID:${user.id} | Email:${user.email} | Nombre:${user.full_name || 'N/A'} | is_active:${user.is_active} | Role:${user.role} | Verificado:${user.email_verified}`
      )
    })

    // 2. Estad√≠sticas detalladas
    console.log('\nüìà PASO 2: ESTAD√çSTICAS DETALLADAS')
    console.log('-'.repeat(60))

    const totalUsers = allUsersFromDB.length
    const activeUsers = usersByStatus.active.length
    const inactiveUsers = usersByStatus.inactive.length
    const adminUsers = allUsersFromDB.filter(u => u.role === 'admin').length
    const verifiedUsers = allUsersFromDB.filter(u => u.email_verified).length

    console.log(`üë• Total usuarios: ${totalUsers}`)
    console.log(
      `‚úÖ Usuarios activos: ${activeUsers} (${((activeUsers / totalUsers) * 100).toFixed(1)}%)`
    )
    console.log(
      `‚ùå Usuarios inactivos: ${inactiveUsers} (${((inactiveUsers / totalUsers) * 100).toFixed(1)}%)`
    )
    console.log(`üõ°Ô∏è Administradores: ${adminUsers}`)
    console.log(
      `üìß Emails verificados: ${verifiedUsers} (${((verifiedUsers / totalUsers) * 100).toFixed(1)}%)`
    )

    // 3. An√°lisis de usuarios sospechosos
    console.log('\nüîç PASO 3: AN√ÅLISIS DE USUARIOS SOSPECHOSOS')
    console.log('-'.repeat(60))

    const suspiciousUsers = allUsersFromDB.filter(
      user => user.is_active && (!user.email_verified || user.role === 'admin')
    )

    console.log(`‚ö†Ô∏è Usuarios activos sospechosos encontrados: ${suspiciousUsers.length}`)

    if (suspiciousUsers.length > 0) {
      console.log('\nüìã DETALLE DE USUARIOS SOSPECHOSOS:')
      suspiciousUsers.forEach((user, index) => {
        console.log(`[${index + 1}] ID:${user.id} | ${user.email}`)
        console.log(`    - Nombre: ${user.full_name || 'SIN NOMBRE'}`)
        console.log(`    - Estado activo: ${user.is_active}`)
        console.log(`    - Rol: ${user.role}`)
        console.log(`    - Email verificado: ${user.email_verified}`)
        console.log(
          `    - ¬øProblema potencial? ${!user.email_verified ? 'Email no verificado' : 'Admin activo'}`
        )
        console.log('    ---')
      })
    }

    // 4. Simulaci√≥n de diferentes escenarios de API
    console.log('\nüåê PASO 4: SIMULACI√ìN DE ESCENARIOS DE API')
    console.log('-'.repeat(60))

    // Escenario 1: Consulta sin filtros (como admin)
    console.log('\nüì° Escenario 1: Consulta sin filtros (admin view)')
    const { data: adminView, error: adminError } = await supabase
      .from('users')
      .select('*')
      .order('id')

    if (!adminError && adminView) {
      console.log(`   ‚úÖ Admin ver√≠a: ${adminView.length} usuarios`)
      console.log(`   üìä Activos: ${adminView.filter(u => u.is_active).length}`)
      console.log(`   üìä Inactivos: ${adminView.filter(u => !u.is_active).length}`)

      // Comparar con datos originales
      const activeDiff = adminView.filter(u => u.is_active).length - activeUsers
      const inactiveDiff = adminView.filter(u => !u.is_active).length - inactiveUsers

      if (activeDiff !== 0 || inactiveDiff !== 0) {
        console.log(`   ‚ö†Ô∏è DISCREPANCIA DETECTADA:`)
        console.log(
          `      - Activos: BD=${activeUsers}, API=${adminView.filter(u => u.is_active).length}, Diff=${activeDiff}`
        )
        console.log(
          `      - Inactivos: BD=${inactiveUsers}, API=${adminView.filter(u => !u.is_active).length}, Diff=${inactiveDiff}`
        )
      } else {
        console.log(`   ‚úÖ CONSISTENCIA CONFIRMADA`)
      }
    }

    // Escenario 2: Consulta solo activos (como usuario normal)
    console.log('\nüì° Escenario 2: Consulta solo activos (user view)')
    const { data: activeOnly, error: activeError } = await supabase
      .from('users')
      .select('*')
      .eq('is_active', true)
      .order('id')

    if (!activeError && activeOnly) {
      console.log(`   ‚úÖ Usuario normal ver√≠a: ${activeOnly.length} usuarios activos`)

      // Comparar con datos originales
      const activeDiff = activeOnly.length - activeUsers
      if (activeDiff !== 0) {
        console.log(`   ‚ö†Ô∏è DISCREPANCIA EN ACTIVOS:`)
        console.log(`      - BD=${activeUsers}, API=${activeOnly.length}, Diff=${activeDiff}`)
      } else {
        console.log(`   ‚úÖ CONSISTENCIA CONFIRMADA`)
      }
    }

    // 5. An√°lisis espec√≠fico del problema de is_active
    console.log('\nüéØ PASO 5: AN√ÅLISIS ESPEC√çFICO DEL PROBLEMA is_active')
    console.log('-'.repeat(60))

    console.log(`üîç VERIFICACI√ìN DE CONSISTENCIA:`)
    console.log(
      `   - ¬øLos datos de BD son consistentes? ${activeUsers + inactiveUsers === totalUsers ? '‚úÖ S√ç' : '‚ùå NO'}`
    )
    console.log(
      `   - ¬øLa consulta de activos es consistente? ${activeOnly?.length === activeUsers ? '‚úÖ S√ç' : '‚ùå NO'}`
    )
    console.log(
      `   - ¬øLa consulta de inactivos es consistente? ${inactiveUsers === totalUsers - activeUsers ? '‚úÖ S√ç' : '‚ùå NO'}`
    )

    // 6. Posibles puntos de fallo
    console.log('\nüí° PASO 6: POSIBLES PUNTOS DE FALLO IDENTIFICADOS')
    console.log('-'.repeat(60))

    console.log(`üîç PUNTO DE FALLO 1: Base de datos`)
    console.log(
      `   - ¬øDatos consistentes en BD? ${activeUsers + inactiveUsers === totalUsers ? '‚úÖ S√ç' : '‚ùå NO'}`
    )
    console.log(
      `   - ¬øUsuarios con datos nulos? ${allUsersFromDB.filter(u => u.is_active === null).length}`
    )
    console.log(
      `   - ¬øUsuarios con datos undefined? ${allUsersFromDB.filter(u => u.is_active === undefined).length}`
    )

    console.log(`\nüîç PUNTO DE FALLO 2: Consultas API`)
    console.log(
      `   - ¬øConsulta general consistente? ${adminView?.length === totalUsers ? '‚úÖ S√ç' : '‚ùå NO'}`
    )
    console.log(
      `   - ¬øConsulta de activos consistente? ${activeOnly?.length === activeUsers ? '‚úÖ S√ç' : '‚ùå NO'}`
    )
    console.log(
      `   - ¬øConsulta de inactivos consistente? ${inactiveUsers === totalUsers - activeUsers ? '‚úÖ S√ç' : '‚ùå NO'}`
    )

    console.log(`\nüîç PUNTO DE FALLO 3: L√≥gica de filtros`)
    console.log(`   - ¬øUsuarios activos sospechosos? ${suspiciousUsers.length} encontrados`)
    console.log(
      `   - ¬øUsuarios sin verificar? ${allUsersFromDB.filter(u => !u.email_verified).length} encontrados`
    )
    console.log(
      `   - ¬øRelaci√≥n activo/no verificado? ${((suspiciousUsers.length / activeUsers) * 100).toFixed(1)}%`
    )

    // 7. Resumen y diagn√≥stico
    console.log('\nüìã PASO 7: RESUMEN Y DIAGN√ìSTICO')
    console.log('='.repeat(60))

    console.log(`üéØ DIAGN√ìSTICO PRELIMINAR:`)
    console.log(
      `   - Base de datos: ${activeUsers + inactiveUsers === totalUsers ? '‚úÖ CONSISTENTE' : '‚ùå INCONSISTENTE'}`
    )
    console.log(
      `   - Consultas API: ${adminView?.length === totalUsers && activeOnly?.length === activeUsers ? '‚úÖ CONSISTENTES' : '‚ùå INCONSISTENTES'}`
    )
    console.log(
      `   - Datos sospechosos: ${suspiciousUsers.length} usuarios (${((suspiciousUsers.length / activeUsers) * 100).toFixed(1)}% de activos)`
    )

    if (suspiciousUsers.length > 0) {
      console.log(`\n‚ö†Ô∏è PROBLEMA IDENTIFICADO:`)
      console.log(`   - ${suspiciousUsers.length} usuarios activos con datos sospechosos`)
      console.log(`   - Principalmente emails no verificados`)
      console.log(`   - Podr√≠a indicar problema en l√≥gica de verificaci√≥n o visualizaci√≥n`)

      console.log(`\nüîß POSIBLES SOLUCIONES:`)
      console.log(`   1. Verificar l√≥gica de filtros en frontend`)
      console.log(`   2. Revisar procesamiento de datos en dashboard.js`)
      console.log(`   3. Verificar permisos de usuario aplic√°ndose correctamente`)
      console.log(`   4. Revisar l√≥gica especial para usuarios admin`)
    } else {
      console.log(`\n‚úÖ NO SE DETECTARON PROBLEMAS SIGNIFICATIVOS`)
      console.log(`   - Los datos son consistentes en todos los niveles`)
      console.log(`   - El problema podr√≠a estar en la interfaz de usuario`)
    }

    console.log('\n‚úÖ DEBUG CON LOGS COMPLETADO')
  } catch (error) {
    console.error('‚ùå Error durante el debug con logs:', error)
  }
}

// Ejecutar el debug con logs detallados
debugWithDetailedLogs()
