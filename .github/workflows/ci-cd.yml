name: FloresYa CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check Prettier formatting
      run: npm run format:check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check for known vulnerabilities
      run: |
        echo "Checking for critical vulnerabilities..."
        npm audit --audit-level=critical || echo "⚠️ Found vulnerabilities, but continuing..."

  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, security-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build CSS
      run: npm run build:css

    - name: Validate OpenAPI spec
      run: npm run generate:openapi

    - name: Validate API client sync
      run: npm run validate:client:sync

    - name: Check build artifacts
      run: |
        ls -la public/css/tailwind.css
        echo "✅ Build artifacts generated successfully"

  integration-tests:
    name: Integration & E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 15
    # Only run if secrets are configured
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Create .env.local file
      run: |
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.local
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.local
        echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env.local
        echo "NODE_ENV=test" >> .env.local
        echo "PORT=3000" >> .env.local
        echo "BASE_URL=http://localhost:3000" >> .env.local

    - name: Build CSS
      run: npm run build:css

    - name: Seed test data
      run: |
        echo "🌱 Seeding test data..."
        npm run seed:test
      env:
        NODE_ENV: test
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    - name: Start application in background
      run: |
        npm start &
        echo "Waiting for server to start..."
        npx wait-on http://localhost:3000 --timeout 30000

    - name: Run API integration tests
      run: npm run test
      env:
        NODE_ENV: test
        BASE_URL: http://localhost:3000
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

    - name: Run E2E tests (CI optimized)
      run: npm run test:e2e:ci
      env:
        CI: true
        NODE_ENV: test
        BASE_URL: http://localhost:3000
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      continue-on-error: true

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 7

  deploy-preview:
    name: Deploy Preview (Vercel)
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Vercel Preview
      run: |
        echo "Would deploy to Vercel preview environment"
        echo "PR: ${{ github.event.pull_request.number }}"
        # Actual Vercel deployment would go here
        # npm install -g vercel
        # vercel --token=${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build CSS
      run: npm run build:css

    - name: Deploy to Vercel Production
      run: |
        echo "Would deploy to Vercel production"
        echo "Branch: ${{ github.ref }}"
        # Actual Vercel deployment would go here
        # npm install -g vercel
        # vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Create deployment tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        TAG_NAME="deploy-$(date +%Y%m%d-%H%M%S)"
        git tag -a "$TAG_NAME" -m "Deployment $TAG_NAME"
        echo "Created tag: $TAG_NAME"
        # git push origin "$TAG_NAME"
